---
import { supabase } from '../../../../lib/supabase/client';
import { Button } from '../../../../components/components/ui/button';
import { Input } from '../../../../components/components/ui/input';
import { Textarea } from '../../../../components/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '../../../../components/components/ui/card';
import { Label } from '../../../../components/components/ui/label';

// Check if user is authenticated
const { data: { session } } = await supabase.auth.getSession();
const isAuthenticated = !!session;

// Redirect to login if not authenticated
if (!isAuthenticated) {
  return Astro.redirect('/admin/login');
}

// Fetch existing categories
const { data: faqs } = await supabase
  .from('faqs')
  .select('category')
  .order('category', { ascending: true });

// Extract unique categories
const categories = [...new Set(faqs?.map(faq => faq.category).filter(Boolean))] || [];
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>New FAQ | Admin Dashboard | Bagel Education</title>
  <link rel="stylesheet" href="/styles/globals.css">
</head>
<body class="min-h-screen bg-background">
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <aside class="hidden md:flex w-64 flex-col bg-card border-r border-border h-screen sticky top-0">
      <div class="p-6 border-b border-border">
        <h1 class="text-xl font-bold">Bagel Admin</h1>
      </div>
      
      <nav class="flex-1 p-4">
        <ul class="space-y-1">
          <li>
            <a href="/admin" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="3" width="7" height="7"></rect>
                <rect x="14" y="3" width="7" height="7"></rect>
                <rect x="14" y="14" width="7" height="7"></rect>
                <rect x="3" y="14" width="7" height="7"></rect>
              </svg>
              Dashboard
            </a>
          </li>
          <li>
            <a href="/admin/content/blog" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
              </svg>
              Blog Posts
            </a>
          </li>
          <li>
            <a href="/admin/content/programs" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
              </svg>
              Programs
            </a>
          </li>
          <li>
            <a href="/admin/content/testimonials" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
              </svg>
              Testimonials
            </a>
          </li>
          <li>
            <a href="/admin/content/faqs" class="flex items-center py-2 px-3 rounded-md bg-accent">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                <line x1="12" y1="17" x2="12.01" y2="17"></line>
              </svg>
              FAQs
            </a>
          </li>
          <li>
            <a href="/admin/media" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                <circle cx="8.5" cy="8.5" r="1.5"></circle>
                <polyline points="21 15 16 10 5 21"></polyline>
              </svg>
              Media Library
            </a>
          </li>
        </ul>
      </nav>
      
      <div class="p-4 border-t border-border">
        <Button id="logout-button" variant="ghost" className="w-full justify-start">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
            <polyline points="16 17 21 12 16 7"></polyline>
            <line x1="21" y1="12" x2="9" y2="12"></line>
          </svg>
          Log out
        </Button>
      </div>
    </aside>
    
    <!-- Main content -->
    <main class="flex-1 p-6">
      <header class="mb-6 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div>
          <h1 class="text-3xl font-bold">New FAQ</h1>
          <p class="text-muted-foreground">Add a new frequently asked question</p>
        </div>
        <div class="flex items-center gap-2">
          <a href="/admin/content/faqs">
            <Button variant="outline" className="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="19" y1="12" x2="5" y2="12"></line>
                <polyline points="12 19 5 12 12 5"></polyline>
              </svg>
              Back to FAQs
            </Button>
          </a>
        </div>
      </header>

      <!-- FAQ form -->
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>FAQ Details</CardTitle>
          <CardDescription>
            Fill in the question and answer below
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <form id="faq-form" class="space-y-6">
            <div class="space-y-4">
              <div>
                <Label htmlFor="question">Question</Label>
                <Input 
                  id="question" 
                  name="question" 
                  required 
                  placeholder="Enter the question"
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="answer">Answer</Label>
                <Textarea 
                  id="answer" 
                  name="answer" 
                  required
                  placeholder="Enter the answer to the question" 
                  className="mt-1 h-32"
                ></Textarea>
              </div>
              
              <div>
                <Label htmlFor="category">Category</Label>
                <div class="flex gap-2">
                  <select 
                    id="category" 
                    name="category" 
                    required
                    class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm mt-1"
                  >
                    <option value="General">General</option>
                    {categories.map((category) => (
                      <option value={category}>{category}</option>
                    ))}
                  </select>
                  <Button 
                    type="button" 
                    id="new-category-btn"
                    variant="outline"
                    className="mt-1"
                  >
                    New Category
                  </Button>
                </div>
              </div>
              
              <div id="new-category-field" class="hidden">
                <Label htmlFor="new_category">New Category Name</Label>
                <Input 
                  id="new_category" 
                  name="new_category" 
                  placeholder="Enter new category name" 
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="order">Display Order</Label>
                <Input 
                  id="order" 
                  name="order" 
                  type="number" 
                  min="0" 
                  placeholder="0" 
                  className="mt-1"
                />
                <p class="text-xs text-muted-foreground mt-1">
                  Higher values appear first. Leave empty for default ordering.
                </p>
              </div>
            </div>
          </form>
        </CardContent>
        <CardFooter className="flex justify-between border-t pt-6">
          <Button variant="outline" id="cancel-btn">Cancel</Button>
          <Button id="save-faq">Save FAQ</Button>
        </CardFooter>
      </Card>
    </main>
  </div>
  
  <script>
    // Initialize Supabase client
    import { createClient } from '@supabase/supabase-js';
    
    window.supabase = createClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY
    );
    
    // New category toggle
    const newCategoryBtn = document.getElementById('new-category-btn');
    const categorySelect = document.getElementById('category');
    const newCategoryField = document.getElementById('new-category-field');
    const newCategoryInput = document.getElementById('new_category');
    
    newCategoryBtn?.addEventListener('click', () => {
      newCategoryField.classList.toggle('hidden');
      if (!newCategoryField.classList.contains('hidden')) {
        newCategoryInput.focus();
        // Set the select to disabled when creating a new category
        categorySelect.disabled = true;
      } else {
        categorySelect.disabled = false;
        newCategoryInput.value = '';
      }
    });
    
    // Submit form
    const faqForm = document.getElementById('faq-form');
    const saveFaqBtn = document.getElementById('save-faq');
    const cancelBtn = document.getElementById('cancel-btn');
    
    saveFaqBtn?.addEventListener('click', async () => {
      const formData = new FormData(faqForm);
      const faqData = Object.fromEntries(formData.entries());
      
      // Use the new category if provided
      if (faqData.new_category && !newCategoryField.classList.contains('hidden')) {
        faqData.category = faqData.new_category;
      }
      
      // Delete the unused new_category field
      delete faqData.new_category;
      
      try {
        const { data, error } = await window.supabase
          .from('faqs')
          .insert(faqData)
          .select()
          .single();
          
        if (error) throw error;
        
        alert('FAQ saved successfully!');
        window.location.href = '/admin/content/faqs';
      } catch (error) {
        console.error('Error saving FAQ:', error);
        alert('Failed to save FAQ. Please try again.');
      }
    });
    
    cancelBtn?.addEventListener('click', () => {
      window.location.href = '/admin/content/faqs';
    });
    
    // Handle logout
    document.getElementById('logout-button')?.addEventListener('click', async () => {
      try {
        const { error } = await window.supabase.auth.signOut();
        if (error) throw error;
        window.location.href = '/admin/login';
      } catch (error) {
        console.error('Error signing out:', error);
      }
    });
  </script>
</body>
</html> 