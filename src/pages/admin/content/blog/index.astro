---
import { supabase } from '../../../../lib/supabase/client';
import ContentLayout from '../../../../layouts/ContentLayout.astro';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '../../../../components/components/ui/card';
import { Input } from '../../../../components/components/ui/input';
import { Button } from '../../../../components/components/ui/button';
import { 
  Table, 
  TableBody, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from '../../../../components/components/ui/table';
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from '../../../../components/components/ui/dropdown-menu';
import { BlogActionMenu } from '../../../../components/components/ui/blog-action-menu';
import { BlogService } from '../../../../lib/services/blog-service';
import type { BlogPost, MultilangText } from '../../../../types/blog';

// Fetch blog posts using the BlogService
let blogPosts: BlogPost[] = [];
let error = null;

try {
  // Fetch blog posts from Supabase through our service
  blogPosts = await BlogService.getAllPosts();
  
  // Parse any potential multilingual content
  blogPosts = blogPosts.map(post => BlogService.parsePost(post));
} catch (e) {
  console.error('Error fetching blog posts:', e);
  error = e;
}

// Get the display title based on language (defaulting to English)
function getDisplayTitle(title: string | MultilangText): string {
  if (typeof title === 'string') {
    return title;
  }
  // Return English title or first available language
  return title.en || Object.values(title)[0] || 'Untitled';
}

// Get the status badge CSS class
function getStatusBadgeClass(status?: string): string {
  switch(status) {
    case 'published':
      return 'bg-green-100 text-green-800';
    case 'archived':
      return 'bg-gray-100 text-gray-800';
    default:
      return 'bg-yellow-100 text-yellow-800';
  }
}
---

<ContentLayout 
  title="Blog Posts" 
  description="Manage your blog content" 
  createLink="/admin/content/blog/new"
>
  <!-- Search and filter section -->
  <Card class="mb-6">
    <CardHeader>
      <CardTitle>Search & Filter</CardTitle>
      <CardDescription>Find specific blog posts or filter by category</CardDescription>
    </CardHeader>
    <CardContent>
      <div class="flex flex-col sm:flex-row gap-4">
        <div class="flex-1">
          <Input 
            type="text" 
            placeholder="Search blog posts..." 
            id="search-input"
          />
        </div>
        <div>
          <Button variant="outline" id="filter-button">
            Filter by Category
          </Button>
        </div>
      </div>
    </CardContent>
  </Card>

  <!-- Blog posts table -->
  <Card>
    <CardHeader>
      <CardTitle>All Blog Posts</CardTitle>
      <CardDescription>Showing {blogPosts.length} posts</CardDescription>
    </CardHeader>
    <CardContent>
      <div class="rounded-md border">
        <Table>
          <TableHeader>
            <TableRow>
              <TableHead>Title</TableHead>
              <TableHead>Category</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Date</TableHead>
              <TableHead class="text-right">Actions</TableHead>
            </TableRow>
          </TableHeader>
          <TableBody>
            {blogPosts.map((post) => (
              <TableRow data-post-id={post.id}>
                <TableCell class="font-medium">{getDisplayTitle(post.title.en.en)}</TableCell>
                <TableCell>{post.category || 'Uncategorized'}</TableCell>
                <TableCell>
                  <span class={`px-2 py-1 rounded-full text-xs ${getStatusBadgeClass(post.status)}`}>
                    {post.status || 'draft'}
                  </span>
                </TableCell>
                <TableCell>{new Date(post.published_at || post.created_at).toLocaleDateString()}</TableCell>
                <TableCell class="text-right">
                  <BlogActionMenu client:only="react" post={post} />
                </TableCell>
              </TableRow>
            ))}
            
            {blogPosts.length === 0 && (
              <TableRow>
                <TableCell colSpan={5} class="text-center py-6 text-muted-foreground">
                  No blog posts found. <a href="/admin/content/blog/new" class="text-primary">Create your first post</a>.
                </TableCell>
              </TableRow>
            )}
          </TableBody>
        </Table>
      </div>
    </CardContent>
  </Card>
</ContentLayout>

<script>
  // Define types for TypeScript
  interface HTMLElementWithStyle extends HTMLElement {
    style: CSSStyleDeclaration;
  }

  // Preview function
  function previewPost(postId: string): void {
    // Open preview in new tab
    window.open(`/blog/preview/${postId}`, '_blank');
  }
  
  // Confirmation dialog for post deletion
  function confirmDeletePost(postId: string, postTitle: string): void {
    if (confirm(`Are you sure you want to delete "${postTitle}"? This action cannot be undone.`)) {
      deletePost(postId);
    }
  }
  
  // Delete post function
  async function deletePost(postId: string): Promise<void> {
    try {
      // Show loading state
      const deleteButtons = document.querySelectorAll(`.delete-btn[data-post-id="${postId}"]`);
      
      deleteButtons.forEach(btn => {
        if (btn instanceof HTMLElement) {
          // Find the span element inside the button and update it
          const textSpan = btn.querySelector('.delete-text');
          if (textSpan) {
            textSpan.textContent = 'Deleting...';
          }
          
          // Find the icon and replace it with a loading spinner
          const icon = btn.querySelector('.delete-icon');
          if (icon) {
            icon.outerHTML = '<svg class="animate-spin mr-2 delete-icon" xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 1 1-6.219-8.56"/></svg>';
          }
          
          btn.disabled = true;
          btn.style.opacity = '0.5';
        }
      });
      
      console.log('Deleting post with ID:', postId);
      
      // Call API to delete post
      const response = await fetch(`/api/blog/delete`, {
        method: 'POST', // Using POST instead of DELETE for better compatibility
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ id: postId }),
      });
      
      const result = await response.json();
      console.log('Delete response:', result);
      
      if (response.ok) {
        // Remove row from table
        const row = document.querySelector(`tr[data-post-id="${postId}"]`);
        if (row instanceof HTMLElementWithStyle) {
          row.style.backgroundColor = '#FFEDED';
          setTimeout(() => {
            row.remove();
            
            // Update count in description
            const countEl = document.querySelector('CardDescription');
            if (countEl) {
              const currentText = countEl.textContent || '';
              const match = currentText.match(/Showing (\d+) posts/);
              if (match && match[1]) {
                const currentCount = parseInt(match[1]) - 1;
                countEl.textContent = currentText.replace(/Showing \d+ posts/, `Showing ${currentCount} posts`);
              }
            }
            
            // Show success message
            alert('Post deleted successfully');
          }, 500);
        }
      } else {
        throw new Error(result.message || 'Failed to delete post');
      }
    } catch (error) {
      console.error('Error deleting post:', error);
      alert('An error occurred while deleting the post. Please try again.');
      
      // Reset delete button
      const deleteButtons = document.querySelectorAll(`.delete-btn[data-post-id="${postId}"]`);
      deleteButtons.forEach(btn => {
        if (btn instanceof HTMLElement) {
          // Find the span element and restore its text
          const textSpan = btn.querySelector('.delete-text');
          if (textSpan) {
            textSpan.textContent = 'Delete';
          }
          
          // Find the icon and restore it
          const icon = btn.querySelector('.delete-icon');
          if (icon) {
            icon.outerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2 delete-icon"><path d="M3 6h18"></path><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path></svg>';
          }
          
          btn.disabled = false;
          btn.style.opacity = '1';
        }
      });
    }
  }
  
  // Function to set up event delegation for React components
  function setupEventDelegation() {
    document.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      
      // Find the closest button or element with our action data attributes
      const actionElement = target.closest('[data-action]');
      
      if (actionElement instanceof HTMLElement) {
        const action = actionElement.dataset.action;
        const postId = actionElement.dataset.postId;
        const postTitle = actionElement.dataset.postTitle;
        
        if (!postId) return;
        
        if (action === 'edit') {
          window.location.href = `/admin/content/blog/edit/${postId}`;
        } else if (action === 'preview') {
          e.preventDefault();
          previewPost(postId);
        } else if (action === 'delete' && postTitle) {
          e.preventDefault();
          confirmDeletePost(postId, postTitle);
        }
      }
    });
  }
  
  // Set up search functionality
  function setupSearch() {
    const searchInput = document.getElementById('search-input');
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        const target = e.target as HTMLInputElement;
        const value = target.value.toLowerCase();
        const rows = document.querySelectorAll('tbody tr');
        
        rows.forEach(row => {
          // Skip the "no posts found" row
          if (row.querySelector('td[colSpan]')) return;
          
          const titleEl = row.querySelector('td:first-child');
          const categoryEl = row.querySelector('td:nth-child(2)');
          
          const title = titleEl?.textContent?.toLowerCase() || '';
          const category = categoryEl?.textContent?.toLowerCase() || '';
          
          if (row instanceof HTMLElementWithStyle) {
            if (title.includes(value) || category.includes(value)) {
              row.style.display = '';
            } else {
              row.style.display = 'none';
            }
          }
        });
      });
    }
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    setupEventDelegation();
    setupSearch();
    
    // Also handle direct button clicks for backward compatibility
    document.querySelectorAll('.preview-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const target = e.currentTarget as HTMLElement;
        const postId = target.dataset.postId;
        if (postId) previewPost(postId);
      });
    });
    
    document.querySelectorAll('.delete-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        e.preventDefault();
        const target = e.currentTarget as HTMLElement;
        const postId = target.dataset.postId;
        const postTitle = target.dataset.postTitle;
        if (postId && postTitle) confirmDeletePost(postId, postTitle);
      });
    });
    
    // Log to confirm script is running
    console.log('Blog post action handlers initialized');
  });
</script> 