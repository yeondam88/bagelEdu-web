---
import { supabase } from '../../../../lib/supabase/client';
import { Button } from '../../../../components/components/ui/button';
import { Input } from '../../../../components/components/ui/input';
import { Textarea } from '../../../../components/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '../../../../components/components/ui/card';
import { Label } from '../../../../components/components/ui/label';

// Check if user is authenticated
const { data: { session } } = await supabase.auth.getSession();
const isAuthenticated = !!session;

// Redirect to login if not authenticated
if (!isAuthenticated) {
  return Astro.redirect('/admin/login');
}
---

<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>New Program | Admin Dashboard | Bagel Education</title>
  <link rel="stylesheet" href="/styles/globals.css">
</head>
<body class="min-h-screen bg-background">
  <div class="flex min-h-screen">
    <!-- Sidebar -->
    <aside class="hidden md:flex w-64 flex-col bg-card border-r border-border h-screen sticky top-0">
      <div class="p-6 border-b border-border">
        <h1 class="text-xl font-bold">Bagel Admin</h1>
      </div>
      
      <nav class="flex-1 p-4">
        <ul class="space-y-1">
          <li>
            <a href="/admin" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="3" width="7" height="7"></rect>
                <rect x="14" y="3" width="7" height="7"></rect>
                <rect x="14" y="14" width="7" height="7"></rect>
                <rect x="3" y="14" width="7" height="7"></rect>
              </svg>
              Dashboard
            </a>
          </li>
          <li>
            <a href="/admin/content/blog" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M4 19.5A2.5 2.5 0 0 1 6.5 17H20"></path>
                <path d="M6.5 2H20v20H6.5A2.5 2.5 0 0 1 4 19.5v-15A2.5 2.5 0 0 1 6.5 2z"></path>
              </svg>
              Blog Posts
            </a>
          </li>
          <li>
            <a href="/admin/content/programs" class="flex items-center py-2 px-3 rounded-md bg-accent">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polyline points="22 12 18 12 15 21 9 3 6 12 2 12"></polyline>
              </svg>
              Programs
            </a>
          </li>
          <li>
            <a href="/admin/content/testimonials" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
              </svg>
              Testimonials
            </a>
          </li>
          <li>
            <a href="/admin/content/faqs" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                <line x1="12" y1="17" x2="12.01" y2="17"></line>
              </svg>
              FAQs
            </a>
          </li>
          <li>
            <a href="/admin/media" class="flex items-center py-2 px-3 rounded-md hover:bg-accent/50 transition">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-3" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                <circle cx="8.5" cy="8.5" r="1.5"></circle>
                <polyline points="21 15 16 10 5 21"></polyline>
              </svg>
              Media Library
            </a>
          </li>
        </ul>
      </nav>
      
      <div class="p-4 border-t border-border">
        <Button id="logout-button" variant="ghost" className="w-full justify-start">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
            <polyline points="16 17 21 12 16 7"></polyline>
            <line x1="21" y1="12" x2="9" y2="12"></line>
          </svg>
          Log out
        </Button>
      </div>
    </aside>
    
    <!-- Main content -->
    <main class="flex-1 p-6">
      <header class="mb-6 flex flex-col sm:flex-row items-start sm:items-center justify-between gap-4">
        <div>
          <h1 class="text-3xl font-bold">New Program</h1>
          <p class="text-muted-foreground">Create a new educational program</p>
        </div>
        <div class="flex items-center gap-2">
          <a href="/admin/content/programs">
            <Button variant="outline" className="flex items-center gap-2">
              <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <line x1="19" y1="12" x2="5" y2="12"></line>
                <polyline points="12 19 5 12 12 5"></polyline>
              </svg>
              Back to Programs
            </Button>
          </a>
        </div>
      </header>

      <!-- Program form -->
      <Card className="mb-6">
        <CardHeader>
          <CardTitle>Program Details</CardTitle>
          <CardDescription>
            Fill in the information below to create your program
          </CardDescription>
        </CardHeader>
        <CardContent className="space-y-6">
          <form id="program-form" class="space-y-6">
            <div class="space-y-4">
              <div>
                <Label htmlFor="title">Title</Label>
                <Input 
                  id="title" 
                  name="title" 
                  required 
                  placeholder="Enter program title"
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="slug">Slug</Label>
                <Input 
                  id="slug" 
                  name="slug" 
                  placeholder="enter-program-slug" 
                  className="mt-1"
                />
                <p class="text-xs text-muted-foreground mt-1">
                  Leave empty to generate automatically from title
                </p>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="type">Program Type</Label>
                  <select 
                    id="type" 
                    name="type" 
                    required
                    class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm mt-1"
                  >
                    <option value="">Select a type</option>
                    <option value="course">Course</option>
                    <option value="workshop">Workshop</option>
                    <option value="bootcamp">Bootcamp</option>
                    <option value="certification">Certification</option>
                  </select>
                </div>
                
                <div>
                  <Label htmlFor="status">Status</Label>
                  <select 
                    id="status" 
                    name="status" 
                    required
                    class="flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm mt-1"
                  >
                    <option value="draft">Draft</option>
                    <option value="upcoming">Upcoming</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                  </select>
                </div>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="price">Price ($)</Label>
                  <Input 
                    id="price" 
                    name="price" 
                    type="number" 
                    min="0" 
                    step="0.01" 
                    placeholder="99.99" 
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="duration">Duration</Label>
                  <Input 
                    id="duration" 
                    name="duration" 
                    placeholder="e.g., 8 weeks, 3 days" 
                    className="mt-1"
                  />
                </div>
              </div>
              
              <div>
                <Label htmlFor="featured_image">Featured Image URL</Label>
                <Input 
                  id="featured_image" 
                  name="featured_image" 
                  placeholder="https://example.com/image.jpg" 
                  className="mt-1"
                />
              </div>
              
              <div>
                <Label htmlFor="short_description">Short Description</Label>
                <Textarea 
                  id="short_description" 
                  name="short_description" 
                  placeholder="Brief description of your program (1-2 sentences)" 
                  className="mt-1 h-20"
                ></Textarea>
              </div>
              
              <div>
                <Label htmlFor="description">Full Description</Label>
                <div class="border rounded-md p-4 mt-1">
                  <div id="editor-container" class="min-h-[300px]"></div>
                  <textarea id="description" name="description" class="hidden"></textarea>
                </div>
              </div>
              
              <div>
                <Label htmlFor="learning_outcomes">Learning Outcomes</Label>
                <Textarea 
                  id="learning_outcomes" 
                  name="learning_outcomes" 
                  placeholder="Enter each learning outcome on a new line" 
                  className="mt-1 h-32"
                ></Textarea>
                <p class="text-xs text-muted-foreground mt-1">
                  Each line will be displayed as a separate bullet point
                </p>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="start_date">Start Date</Label>
                  <Input 
                    id="start_date" 
                    name="start_date" 
                    type="date" 
                    className="mt-1"
                  />
                </div>
                
                <div>
                  <Label htmlFor="instructor">Instructor</Label>
                  <Input 
                    id="instructor" 
                    name="instructor" 
                    placeholder="Instructor name" 
                    className="mt-1"
                  />
                </div>
              </div>
              
              <div>
                <Label htmlFor="prerequisites">Prerequisites</Label>
                <Textarea 
                  id="prerequisites" 
                  name="prerequisites" 
                  placeholder="Enter any prerequisites for this program" 
                  className="mt-1 h-20"
                ></Textarea>
              </div>
            </div>
          </form>
        </CardContent>
        <CardFooter className="flex justify-between border-t pt-6">
          <Button variant="outline" id="save-draft">Save as Draft</Button>
          <Button id="publish-program">Publish Program</Button>
        </CardFooter>
      </Card>
    </main>
  </div>
  
  <script>
    // Initialize Supabase client
    import { createClient } from '@supabase/supabase-js';
    
    window.supabase = createClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY
    );
    
    // Load Quill editor
    document.addEventListener('DOMContentLoaded', async () => {
      const { default: Quill } = await import('https://cdn.skypack.dev/quill@1.3.7');
      
      // Initialize Quill editor
      const quill = new Quill('#editor-container', {
        theme: 'snow',
        modules: {
          toolbar: [
            [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
            ['bold', 'italic', 'underline', 'strike'],
            [{ 'list': 'ordered'}, { 'list': 'bullet' }],
            [{ 'color': [] }, { 'background': [] }],
            ['link', 'image', 'code-block'],
            ['clean']
          ]
        },
        placeholder: 'Write a detailed description of your program...'
      });
      
      // Add Quill CSS
      const quillCSS = document.createElement('link');
      quillCSS.rel = 'stylesheet';
      quillCSS.href = 'https://cdn.quilljs.com/1.3.7/quill.snow.css';
      document.head.appendChild(quillCSS);
      
      // Update hidden content field when editor content changes
      quill.on('text-change', () => {
        document.getElementById('description').value = quill.root.innerHTML;
      });
      
      // Auto-generate slug from title
      const titleInput = document.getElementById('title');
      const slugInput = document.getElementById('slug');
      
      titleInput?.addEventListener('blur', () => {
        if (slugInput.value) return; // Don't override if already has a value
        
        const slug = titleInput.value
          .toLowerCase()
          .replace(/[^\w\s]/gi, '')
          .replace(/\s+/g, '-');
          
        slugInput.value = slug;
      });
      
      // Handle form submission
      function handleSubmit(status) {
        // Get form data
        const form = document.getElementById('program-form');
        const formData = new FormData(form);
        
        // Set status
        formData.set('status', status);
        
        // Get content from Quill
        formData.set('description', quill.root.innerHTML);
        
        // Convert to object
        const programData = Object.fromEntries(formData.entries());
        
        // Format learning outcomes as array
        if (programData.learning_outcomes) {
          programData.learning_outcomes = programData.learning_outcomes
            .split('\n')
            .map(outcome => outcome.trim())
            .filter(outcome => outcome);
        }
        
        return programData;
      }
      
      // Save as draft
      document.getElementById('save-draft')?.addEventListener('click', async () => {
        const programData = handleSubmit('draft');
        await saveProgram(programData);
      });
      
      // Publish program
      document.getElementById('publish-program')?.addEventListener('click', async () => {
        const programData = handleSubmit(document.getElementById('status').value);
        await saveProgram(programData);
      });
      
      async function saveProgram(programData) {
        try {
          const { data, error } = await window.supabase
            .from('programs')
            .insert(programData)
            .select()
            .single();
            
          if (error) throw error;
          
          alert('Program saved successfully!');
          window.location.href = '/admin/content/programs';
        } catch (error) {
          console.error('Error saving program:', error);
          alert('Failed to save program. Please try again.');
        }
      }
    });
    
    // Handle logout
    document.getElementById('logout-button')?.addEventListener('click', async () => {
      try {
        const { error } = await window.supabase.auth.signOut();
        if (error) throw error;
        window.location.href = '/admin/login';
      } catch (error) {
        console.error('Error signing out:', error);
      }
    });
  </script>
</body>
</html> 