---
import { supabase } from '../../../lib/supabase/client';
import Layout from '../../../layouts/Layout.astro';
import { BlogService } from '../../../lib/services/blog-service';
import type { BlogPost } from '../../../types/blog';
import BlogContent from '../../../components/blog/BlogContent';

// Get the blog post ID from the URL
const { id } = Astro.params;

// Check if user is authenticated (preview should be restricted to authenticated users)
const { data: { session } } = await supabase.auth.getSession();
if (!session) {
  return Astro.redirect('/auth/login?redirect=' + encodeURIComponent(Astro.url.pathname));
}

// Fetch the blog post to preview
let blogPost: BlogPost | null = null;
let author = null;
let error = null;

try {
  // Use BlogService to fetch the post
  blogPost = await BlogService.getPostById(id as string);
  
  if (!blogPost) {
    error = "Blog post not found";
  } else {
    // Ensure the post is properly parsed (handles multilingual content)
    blogPost = BlogService.parsePost(blogPost);
    
    // If blog post has an author_id, fetch the author separately
    if (blogPost.author_id) {
      try {
        const { data: authorData } = await supabase
          .from('profiles')
          .select('*')
          .eq('id', blogPost.author_id)
          .single();
          
        if (authorData) {
          author = authorData;
        }
      } catch (authorError) {
        console.error('Error fetching author:', authorError);
        // Don't set error since we still have the post
      }
    }
  }
} catch (e) {
  error = e instanceof Error ? e.message : 'An unknown error occurred';
}

// Function to get the display title
function getDisplayTitle(title: any): string {
  if (!title) return 'Untitled';
  
  if (typeof title === 'string') {
    // Try to parse it as JSON if it looks like JSON
    if (title.startsWith('{') && title.endsWith('}')) {
      try {
        const parsed = JSON.parse(title);
        return parsed.en || Object.values(parsed)[0] || 'Untitled';
      } catch (e) {
        return title;
      }
    }
    return title;
  }
  
  // Handle object format
  if (typeof title === 'object') {
    return title.en || Object.values(title)[0] || 'Untitled';
  }
  
  return 'Untitled';
}

// Function to get content based on language preference
function getContent(content: any): string {
  if (!content) return '';
  
  if (typeof content === 'string') {
    // Try to parse it as JSON if it looks like JSON
    if (content.startsWith('{') && content.endsWith('}')) {
      try {
        const parsed = JSON.parse(content);
        return parsed.en || Object.values(parsed)[0] || '';
      } catch (e) {
        return content;
      }
    }
    return content;
  }
  
  // Handle object format
  if (typeof content === 'object') {
    return content.en || Object.values(content)[0] || '';
  }
  
  return '';
}

const title = blogPost ? getDisplayTitle(blogPost.title) : 'Post Not Found';
const content = blogPost ? getContent(blogPost.content) : '';
const excerpt = blogPost ? getContent(blogPost.excerpt) : '';
const publishedDate = blogPost?.published_at ? new Date(blogPost.published_at) : null;

// Convert title string to multilingual format expected by Layout
const pageTitle = { 
  en: title, 
  ko: title 
};

const pageDescription = { 
  en: excerpt,
  ko: excerpt
};
---

<Layout title={pageTitle} description={pageDescription}>
  <div class="container mx-auto py-8">
    {error && (
      <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative my-4" role="alert">
        <strong class="font-bold">Error:</strong>
        <span class="block sm:inline">{error}</span>
      </div>
    )}
    
    {!error && !blogPost && (
      <div class="text-center py-10">
        <h1 class="text-2xl font-bold text-gray-900">Blog Post Not Found</h1>
        <p class="mt-4 text-gray-600">The blog post you're looking for does not exist or has been removed.</p>
        <a href="/admin/content/blog" class="mt-6 inline-block text-blue-600 hover:underline">Return to Blog Posts</a>
      </div>
    )}
    
    {blogPost && (
      <div class="max-w-4xl mx-auto px-4 py-8">
        <div class="flex items-center justify-between mb-6">
          <div class="flex items-center">
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
              Preview Mode
            </span>
            <span class="ml-2 text-sm text-gray-500">
              This is a preview and not publicly visible
            </span>
          </div>
          <div class="flex space-x-2">
            <a href={`/admin/content/blog/edit/${id}`} class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring bg-primary text-primary-foreground shadow hover:bg-primary/90 h-9 px-4 py-2">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
              </svg>
              Edit Post
            </a>
            <a href="/admin/content/blog" class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring bg-secondary text-secondary-foreground hover:bg-secondary/80 h-9 px-4 py-2">
              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="mr-2">
                <path d="M19 12H5M12 19l-7-7 7-7"/>
              </svg>
              Back to Posts
            </a>
          </div>
        </div>
        
        <article class="prose prose-lg max-w-none">
          <h1 class="text-4xl font-bold mb-6">{title}</h1>
          
          {excerpt && (
            <div class="text-xl text-gray-600 mb-6 italic">
              {excerpt}
            </div>
          )}
          
          <div class="flex items-center space-x-4 mb-8 text-sm text-gray-500">
            {author && (
              <div class="flex items-center space-x-2">
                {author.avatar_url ? (
                  <img src={author.avatar_url} alt={author.full_name || 'Author'} class="w-10 h-10 rounded-full" />
                ) : (
                  <div class="w-10 h-10 bg-gray-200 rounded-full flex items-center justify-center">
                    <span class="text-gray-500">{(author.full_name || 'A').charAt(0)}</span>
                  </div>
                )}
                <span class="font-medium">{author.full_name || 'Anonymous'}</span>
              </div>
            )}
            
            {publishedDate && (
              <time datetime={publishedDate.toISOString()}>
                {publishedDate.toLocaleDateString('en-US', { 
                  year: 'numeric', 
                  month: 'long', 
                  day: 'numeric' 
                })}
              </time>
            )}
            
            {blogPost.category && (
              <span>
                In <span class="font-medium">{blogPost.category}</span>
              </span>
            )}

            <span class="px-2 py-1 rounded text-xs font-medium" style={`
              background-color: ${blogPost.status === 'published' ? '#DCFCE7' : 
                                blogPost.status === 'archived' ? '#F3F4F6' : '#FEF9C3'};
              color: ${blogPost.status === 'published' ? '#166534' :
                      blogPost.status === 'archived' ? '#374151' : '#854D0E'};
            `}>
              {blogPost.status || 'draft'}
            </span>
          </div>
          
          {blogPost.featured_image && (
            <img 
              src={blogPost.featured_image} 
              alt={title}
              class="w-full h-auto rounded-lg mb-8 object-cover"
            />
          )}
          
          <div class="blog-content">
            <BlogContent content={content} client:only="react" />
          </div>
        </article>
      </div>
    )}
  </div>
</Layout> 