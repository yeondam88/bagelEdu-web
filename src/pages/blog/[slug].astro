---
import { getCollection } from 'astro:content'
import Layout from '@layouts/Layout.astro'
import { formatDate } from '../../utils/date'
import { Image } from 'astro:assets'
import { isRemoteImage, getImageSource, getImageSrcString } from '../../utils/images'

export const prerender = true

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog')
  return blogEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }))
}

const { entry } = Astro.props
if (!entry) throw new Error('No blog entry found')

const { Content } = await entry.render()
const imageSrc = entry.data.image.src
const isRemote = isRemoteImage(imageSrc)
---

<Layout title={{ en: entry.data.title?.en, ko: entry.data.title?.ko }} description={{ en: entry.data.excerpt.en, ko: entry.data.excerpt.ko }}>
  <section class="relative bg-gray-50 sm:py-16">
    <div class="absolute inset-0 overflow-hidden">
      <div
        class="absolute left-1/2 top-0 h-[800px] w-[800px] -translate-x-1/2 -translate-y-1/2 rounded-full bg-gray-100/60 blur-3xl"
      >
      </div>
      <div
        class="absolute bottom-0 right-0 h-[600px] w-[600px] translate-x-1/2 translate-y-1/2 rounded-full bg-gray-50/50 blur-3xl"
      >
      </div>
    </div>

    <div class="relative mx-auto max-w-7xl px-4 mt-16">
      <div class="flex max-w-full flex-row items-start gap-8">
        <div class="flex-1">
          <a href="/blog" class="inline-flex items-center mb-8 text-sm font-medium text-gray-800 hover:text-gray-800 pt-8">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
            </svg>
            <span x-data x-text="$store.language === 'ko' ? '블로그로 돌아가기' : 'Back to Blog'"></span>
          </a>
          <div class="max-w-xl">
            {
              entry.data.category && (
                <span class="mb-4 inline-flex items-center rounded-lg bg-gray-100 px-3 py-1.5 text-sm font-medium text-gray-800">
                  <span x-data={`{ category: '${entry.data.category}' }`} x-text="$store.language === 'ko' ? {
                    'MBA': 'MBA',
                    'Admission': '입학',
                    'Education': '교육'
                  }[category] || category : category"></span>
                </span>
              )
            }

            <h1 class="mb-6 text-3xl font-bold text-gray-900 md:text-4xl">
              <span 
                x-data={`{ title: ${JSON.stringify(entry.data.title)} }`}
                x-text="$store.language === 'ko' ? title.ko : title.en"
              >
                {entry.data.title?.en}
              </span>
            </h1>

            <div class="flex flex-col gap-4 text-gray-600">
              <div class="flex items-center gap-3">
                <img
                  src={entry.data.authorImage}
                  alt={entry.data.author}
                  class="h-8 w-8 rounded-full object-cover"
                />
                <div>
                  <div class="font-medium text-gray-900">{entry.data.author}</div>
                  <div class="text-sm text-gray-600">
                    <span x-data x-text="$store.language === 'ko' ? '공동대표 / 대표원장' : 'Co-Founder / Director'"></span>
                  </div>
                </div>
              </div>

              {
                entry.data.date && (
                  <time
                    datetime={new Date(entry.data.date).toISOString()}
                    class="text-sm"
                  >
                    <span x-data x-init={`
                      $el.textContent = new Date('${entry.data.date}').toLocaleDateString(
                        $store.language === 'ko' ? 'ko-KR' : 'en-US',
                        { year: 'numeric', month: 'long', day: 'numeric' }
                      )
                    `}></span>
                  </time>
                )
              }
            </div>
          </div>
        </div>

        <div class="flex-1">
          <div class="relative w-full">
            {isRemote && (
              <img 
                src={getImageSrcString(imageSrc)}
                alt={entry.data.image.alt}
                width={600}
                height={400}
                class="w-full rounded-lg shadow-lg object-cover"
              />
            )}
            
            {!isRemote && (
              <Image 
                src={getImageSource(imageSrc)}
                alt={entry.data.image.alt}
                width={600}
                height={400}
                class="w-full rounded-lg shadow-lg object-cover"
              />
            )}
          </div>
        </div>
      </div>
    </div>
  </section>

  <article class="mx-auto max-w-3xl px-4 py-8 sm:py-16 sm:px-6 lg:px-8">
    <div
      class="prose prose-sm sm:prose-lg max-w-none prose-headings:font-bold prose-headings:tracking-tight prose-a:text-gray-600 hover:prose-a:text-gray-500 prose-img:rounded-xl prose-headings:text-2xl sm:prose-headings:text-3xl prose-p:text-base sm:prose-p:text-lg prose-ul:text-base sm:prose-ul:text-lg prose-ol:text-base sm:prose-ol:text-lg"
      x-data
      :class="$store.language === 'ko' ? 'lang-ko' : 'lang-en'"
    >
      <Content />
    </div>
  </article>
</Layout>

<style is:global>
  /* Hide English content when Korean is selected */
  .lang-ko :global(.en-content) {
    display: none;
  }
  
  /* Hide Korean content when English is selected */
  .lang-en :global(.ko-content) {
    display: none;
  }

  /* Existing styles */
  .prose img {
    @apply mx-auto rounded-lg shadow-md;
  }

  .prose pre {
    @apply overflow-x-auto rounded-lg shadow-md;
  }

  .prose blockquote {
    @apply border-l-4 border-purple-500;
  }
</style>
