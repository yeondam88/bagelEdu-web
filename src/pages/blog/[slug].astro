---
import { getCollection } from 'astro:content';
import Layout from '@layouts/Layout.astro';
import { formatDate } from '../../utils/date';
import { Image } from 'astro:assets';

export const prerender = true;

export async function getStaticPaths() {
  const blogEntries = await getCollection('blog');
  return blogEntries.map(entry => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
if (!entry) throw new Error('No blog entry found');

const { Content } = await entry.render();
---

<Layout title={entry.data.title}>
  <article class="mx-auto max-w-3xl px-4 sm:px-6 lg:px-8 py-8 sm:py-12 lg:py-16">
    {/* Back Button */}
    <a href="/blog" class="inline-flex items-center mb-8 text-sm font-medium text-purple-600 hover:text-purple-500">
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
        <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
      </svg>
      Back to Blog
    </a>

    {/* Header Section */}
    <header class="mb-8 sm:mb-12">
      <div class="space-y-4">
        
        {entry.data.category && (
          <div class="text-sm font-medium text-purple-600">
            {entry.data.category}
          </div>
        )}
        
        <h1 class="text-3xl sm:text-4xl lg:text-5xl font-bold text-gray-900 tracking-tight">
          {entry.data.title}
        </h1>
        <div class="flex flex-wrap items-center gap-x-4 gap-y-2 text-sm text-gray-600">
          {entry.data.date && (
            <time datetime={new Date(entry.data.date).toISOString()}>
              {formatDate(new Date(entry.data.date))}
            </time>
          )}
          {entry.data.author && (
            <div class="flex items-center gap-x-2">
              {entry.data.authorImage && (
                <Image 
                  src={entry.data.authorImage} 
                  alt={entry.data.author}
                  class="w-8 h-8 rounded-full object-cover"
                />
              )}
              <span>{entry.data.author}</span>
            </div>
          )}
        </div>
      </div>
      
      {entry.data.image && (
        <div class="mt-8 sm:mt-10 aspect-[16/9] overflow-hidden rounded-xl">
          <img 
            src={entry.data.image} 
            alt={entry.data.title}
            class="w-full h-full object-cover"
          />
        </div>
      )}
    </header>

    {/* Content Section */}
    <div class="prose prose-lg max-w-none prose-headings:font-bold prose-headings:tracking-tight prose-a:text-purple-600 hover:prose-a:text-purple-500 prose-img:rounded-xl">
      <Content />
    </div>

    {/* Footer Section */}
    {entry.data.tags && (
      <footer class="mt-12 pt-8 border-t border-gray-200">
        <div class="flex flex-wrap gap-2">
          {entry.data.tags.map((tag: string) => (
            <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-gray-100 text-gray-800">
              {tag}
            </span>
          ))}
        </div>
      </footer>
    )}
  </article>
</Layout>

<style>
  /* Optional: Add custom styles for your content */
  :global(.prose img) {
    @apply mx-auto rounded-lg shadow-md;
  }
  
  :global(.prose pre) {
    @apply rounded-lg shadow-md overflow-x-auto;
  }

  :global(.prose blockquote) {
    @apply border-l-4 border-purple-500;
  }
</style>