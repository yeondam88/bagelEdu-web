---
import { Image } from 'astro:assets'
import { Icon } from 'astro-icon/components'
import { getCollection } from 'astro:content'
import type { Testimonial } from '@types'

const bgColorsClass = [
  'bg-yellow-200',
  'bg-purple-25',
  'bg-rose-50',
  'bg-blue-50',
]

const testimonials: Testimonial[] = await getCollection('testimonials')
---

<section class="bg-purple-600 py-20 sm:py-28 md:mt-48 lg:py-32">
  <div class="mx-auto px-4 sm:px-6 lg:max-w-screen-2xl">
    <div class="flex flex-col items-center justify-center">
      <h2 class="h2 max-w-2xl text-center text-white">
        학생들과 학부모님의 생생한 후기
      </h2>
    </div>

    <div class="relative mt-12 md:mt-14 lg:mt-16 xl:mt-20 2xl:mt-24">
      <!-- Carousel controls -->
      <button 
        class="absolute -left-4 top-1/2 z-10 -translate-y-1/2 transform rounded-full bg-white p-2 shadow-lg"
        id="prev-btn"
        aria-label="Previous testimonials"
      >
        <Icon name="chevron-left" class="h-6 w-6 text-purple-600" />
      </button>
      
      <button 
        class="absolute -right-4 top-1/2 z-10 -translate-y-1/2 transform rounded-full bg-white p-2 shadow-lg"
        id="next-btn"
        aria-label="Next testimonials"
      >
        <Icon name="chevron-right" class="h-6 w-6 text-purple-600" />
      </button>

      <!-- Carousel container -->
      <div class="overflow-hidden">
        <div 
          class="flex transition-transform duration-300 ease-in-out"
          id="carousel-track"
        >
          {
            testimonials.map((item, index) => (
              <div class="w-full flex-shrink-0 px-3 sm:w-1/2 xl:w-1/4">
                <blockquote
                  class:list={[
                    bgColorsClass[index % 4],
                    'flex h-full flex-col rounded-3xl px-8 py-8 transition duration-300 ease-in-out sm:px-6 md:px-8 lg:px-5 2xl:px-8',
                  ]}
                >
                  <div class="flex-shrink-0">
                    <Image
                      src={item.data.image}
                      width={80}
                      height={80}
                      class="h-20 w-20 rounded-full border-2 border-yellow-300 object-cover drop-shadow-2xl filter"
                      alt={item.data.name}
                    />
                    <p class="mt-3 text-lg font-bold text-purple-900">
                      {item.data.name}
                    </p>
                    <div class="mt-1 flex w-full justify-start space-x-1">
                      {[...Array(item.data.stars)].map((e) => (
                        <Icon name="star-filled" class="h-5 w-5 text-yellow-500" />
                      ))}
                    </div>
                  </div>
                  <p class="mt-5 flex-grow text-lg text-purple-800">
                    "{item.data.testimonial}"
                  </p>
                </blockquote>
              </div>
            ))
          }
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  const track = document.getElementById('carousel-track');
  const prevBtn = document.getElementById('prev-btn');
  const nextBtn = document.getElementById('next-btn');
  
  let currentIndex = 0;
  let autoScrollInterval: number;
  const itemWidth = 100;
  const itemsPerView = window.innerWidth >= 1280 ? 4 : window.innerWidth >= 640 ? 2 : 1;
  const maxIndex = document.querySelectorAll('#carousel-track > div').length - itemsPerView;
  const AUTO_SCROLL_INTERVAL = 3000; // 3 seconds

  function updateCarousel() {
    if (track) {
      track.style.transform = `translateX(-${currentIndex * (itemWidth / itemsPerView)}%)`;
    }
    
    if (prevBtn) prevBtn.style.display = currentIndex === 0 ? 'none' : 'block';
    if (nextBtn) nextBtn.style.display = currentIndex === maxIndex ? 'none' : 'block';
  }
  function startAutoScroll() {
    autoScrollInterval = window.setInterval(() => {
      if (currentIndex === maxIndex) {
        currentIndex = 0; // Reset to start
      } else {
        currentIndex = Math.min(currentIndex + 1, maxIndex);
      }
      updateCarousel();
    }, AUTO_SCROLL_INTERVAL);
  }

  function stopAutoScroll() {
    clearInterval(autoScrollInterval);
  }

  prevBtn?.addEventListener('click', () => {
    stopAutoScroll();
    currentIndex = Math.max(currentIndex - 1, 0);
    updateCarousel();
    startAutoScroll();
  });

  nextBtn?.addEventListener('click', () => {
    stopAutoScroll();
    currentIndex = Math.min(currentIndex + 1, maxIndex);
    updateCarousel();
    startAutoScroll();
  });

  // Pause auto-scroll when hovering over carousel
  track?.addEventListener('mouseenter', stopAutoScroll);
  track?.addEventListener('mouseleave', startAutoScroll);

  // Update on resize
  window.addEventListener('resize', () => {
    const newItemsPerView = window.innerWidth >= 1280 ? 4 : window.innerWidth >= 640 ? 2 : 1;
    if (newItemsPerView !== itemsPerView) {
      location.reload();
    }
  });

  // Initial setup
  updateCarousel();
  startAutoScroll();

  // Cleanup on page unload
  window.addEventListener('unload', stopAutoScroll);
</script>
