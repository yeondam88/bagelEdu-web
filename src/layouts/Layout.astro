---
import '@styles/tailwind.css'
import '@fontsource-variable/roboto-flex'
import Header from '@components/shared/Header.astro'
import CallToAction from '@components/shared/CallToAction.astro'
import Footer from '@components/shared/Footer.astro'
import { ViewTransitions } from 'astro:transitions'
import { SITE } from '@config'
import Analytics from '@vercel/analytics/astro'

interface Props {
  title: { en: string; ko?: string }
  author?: string
  description?: { en: string; ko?: string }
  ogImage?: string
  canonicalURL?: string
}

const {
  title = SITE.title,
  author = SITE.author,
  description = SITE.description,
  ogImage = SITE.ogImage,
  canonicalURL = new URL(Astro.url.pathname.replace(/\/$/, ''), Astro.site)
    .href,
} = Astro.props as Props

const socialImageURL = new URL(ogImage ?? SITE.ogImage, Astro.url.origin).href

// Default to Korean description, fallback to English if Korean is not available
const metaDescription =
  typeof description === 'string'
    ? description
    : description?.ko || description?.en || ''
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta
      name="viewport"
      content="width=device-width, initial-scale=1.0, maximum-scale=1.0"
    />
    <link rel="canonical" href={canonicalURL} />
    <meta name="generator" content={Astro.generator} />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />

    <!-- General Meta Tags -->
    <title>{typeof title === 'string' ? title : title.en}</title>
    <meta name="title" content={typeof title === 'string' ? title : title.en} />
    <meta name="description" content={metaDescription} />
    <meta name="author" content={author} />
    <link rel="sitemap" href="/sitemap-index.xml" />

    <!-- Open Graph / Facebook -->
    <meta
      property="og:title"
      content={typeof title === 'string' ? title : title.en}
    />
    <meta property="og:description" content={metaDescription} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:image" content={socialImageURL} />

    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content={canonicalURL} />
    <meta
      property="twitter:title"
      content={typeof title === 'string' ? title : title.en}
    />
    <meta property="twitter:description" content={metaDescription} />
    <meta property="twitter:image" content={socialImageURL} />

    <ViewTransitions />

    <!-- Global Alpine initialization -->
    <script>
      // Only initialize Alpine if it hasn't been initialized yet
      if (typeof window.Alpine === 'undefined') {
        import('alpinejs').then((module) => {
          const Alpine = module.default
          window.Alpine = Alpine

          // Initialize language store with saved preference or detect from location
          const initializeLanguage = async () => {
            // First check if we have a saved preference
            const savedLang = localStorage.getItem('preferred-language')
            if (savedLang && (savedLang === 'en' || savedLang === 'ko')) {
              return savedLang
            }

            try {
              // Try to get location from IP
              const response = await fetch('https://ipapi.co/json/')
              const data = await response.json()

              // If in Korea, default to Korean
              if (data.country_code === 'KR') {
                return 'ko'
              }

              // For all other countries, check browser language
              const [browserLang] = navigator.language.split('-')
              return browserLang === 'ko' ? 'ko' : 'en'
            } catch (error) {
              console.error('Error detecting location:', error)
              return 'en'
            }
          }

          // Initialize the store with a default value
          Alpine.store('language', 'en')

          // Initialize language after DOM is loaded
          document.addEventListener('DOMContentLoaded', async () => {
            const detectedLang = await initializeLanguage()
            Alpine.store('language', detectedLang)
          })

          // Watch for language changes and persist them
          Alpine.effect(() => {
            const currentLang = Alpine.store('language') as 'en' | 'ko'
            localStorage.setItem('preferred-language', currentLang)
            document.documentElement.lang = currentLang
          })

          // Start Alpine
          Alpine.start()
        })
      }
    </script>
  </head>
  <body class="overflow-x-hidden">
    <Header />
    <slot />
    <Footer />
    <Analytics mode="auto" debug={true} />
  </body>
</html>
